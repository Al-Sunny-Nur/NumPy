# -*- coding: utf-8 -*-
"""NumPy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ek_5DyfRFDA_oJHo2fMi78RmXMxShLGy
"""

import numpy as np  # Importing the NumPy library
my_np_array = np.array([1, 2, 3, 4, 5])  # Creating a NumPy array
print(my_np_array)  # Printing the NumPy array
print(type(my_np_array))  # Printing the type of the NumPy array
print(my_np_array.dtype)  # Printing the data type of the NumPy array
print(my_np_array.shape)  # Printing the shape of the NumPy array

my_2D_array = np.array([[1, 2, 3], [4, 5, 6]])  # Creating a 2D NumPy array
print(my_2D_array)  # Printing the 2D NumPy array

y_2D_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # Creating a 2D NumPy array
print(my_2D_array)  # Printing the 2D NumPy array
print(my_2D_array[0:2, 1:3])  # Slicing the 2D NumPy array
print(my_2D_array.shape)  # Printing the shape of the 2D NumPy array
print(my_2D_array.dtype)  # Printing the data type of the 2D NumPy array

my_np_array = np.array([1, 2, 3, 4, 5])  # Creating a NumPy array
print(my_np_array)  # Printing the NumPy array
#Iterate by Index
for value in my_np_array:  # Iterating through the NumPy array
    print(value)  # Printing each value in the NumPy array

#Iterate by value
for i,value in enumerate(my_np_array):# Iterating through the NumPy array with index
    # Printing each value in the NumPy array with its index using an f-string
    print(f"index={i} value={value}")

#Reshape
my_2D_array = np.array([[1, 2, 3], [4, 5, 6], [7,8,9],[10,11,12],[13,14,15]])  # Creating a 2D NumPy array
print(my_2D_array)  # Printing the 2D NumPy array
print(my_2D_array.shape)  # Printing the shape of the 2D NumPy array
print(my_2D_array.dtype)  # Printing the data type of the 2D NumPy arra
my_2D_array = my_2D_array.reshape(3,5)  # Reshaping the 2D NumPy array
print(my_2D_array)  # Printing the reshaped 2D NumPy array

my_2D_array = my_2D_array.reshape(1,5,3)  # Reshaping the 2D NumPy array
print(my_2D_array)  # Printing the reshaped 2D NumPy array

#reshaping
my_np_array = np.zeros(shape=(3,4,5,6))
print(my_np_array)

my_np_array =np.zeros(shape=(3,4,2,2))
my_np_array_reshaped = my_np_array.reshape(3,4,-1)
print(my_np_array_reshaped)
print(my_np_array_reshaped.shape)

#Sort
probabilities = np.array([0.6, 0.2, 0.3, 0.1, 0.5])  # Creating a NumPy array
print(probabilities)  # Printing the NumPy array
probabilities_sorted = np.sort(probabilities)  # Sorting the NumPy array
print(probabilities_sorted)  # Printing the sorted NumPy array

probabilities_reversed_sorted = np.sort(probabilities)[::-1]  # Reversing the sorted NumPy array
print(probabilities_reversed_sorted)  # Printing the reversed sorted NumPy array

#Split
my_np_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])  # Creating a NumPy array
new_np_array = np.array_split(my_np_array, 3)  # Splitting the NumPy array into 3 parts
print(new_np_array)  # Printing the split NumPy arrays
print(new_np_array[0])  # Printing the first split NumPy array
print(new_np_array[1])  # Printing the second split NumPy array
print(new_np_array[2])  # Printing the third split NumPy array

my_np_array_1 = np.array([1, 2, 3, 4, 5])  # Creating a NumPy array
my_np_array_2 = np.array([6, 7, 8, 9, 10])  # Creating a NumPy array
print(my_np_array_1)  # Printing the first NumPy array
print(my_np_array_2)  #Printing the second NumPy arrray

dot_product = np.dot(my_np_array_1, my_np_array_2)  # Calculating the dot product of the two NumPy arrays
print(dot_product)  # Printing the dot product

my_2D_array_1 =np.array([[1, 2, 3], [4, 5, 6]])  # Creating a 2D NumPy array
print(my_2D_array_1.T)

from scipy import stats # Import the stats module from scipy
my_np_array = np.array([1, 2, 2, 4, 3, 4, 5])  # Creating a NumPy array
print(my_np_array)  # Printing the NumPy array
print(np.mean(my_np_array))  # Calculating the mean of the NumPy array
print(np.median(my_np_array))  # Calculating the median of the NumPy array
print(np.std(my_np_array))  # Calculating the standard deviation of the NumPy array
mode_result = stats.mode(my_np_array)
print(f"Mode: {mode_result.mode}") # Printing the mode

#NumPy Filtering
my_id_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])  # Creating a NumPy array
print(my_id_array)  # Printing the NumPy array
filtered_mask =[True, False, False, False, True, False, True, False, True]  # Creating a boolean mask
filtered_array = my_id_array[filtered_mask]  # Filtering the NumPy array
print(filtered_array)  # Printing the filtered NumPy array

filtered_mask = (my_id_array % 2 == 0)  # Creating a boolean mask
print(filtered_mask)  # Printing the boolean mask
filtered_array = my_id_array[filtered_mask]  # Filtering the NumPy array
print(filtered_array)  # Printing the filtered NumPy array

def my_filter_method(x):
    if x % 2 == 0:
        return True
    else:
        return False

filtered_array = my_id_array[my_id_array % 2 == 0] # This creates a boolean mask and applies it directly
print(filtered_array)

filtered_iterable = filter(my_filter_method, my_id_array)  # Filtering the NumPy array
my_filter_array = np.array(
     list(filtered_iterable))
my_filter_array
print(my_filter_array)

for x in my_id_array:
    x = x + 5
my_id_array = my_id_array + 5
print(my_id_array)

#Broadcasting
w = np.array(
    [1, 2]
)

x = np.array([
    [5, 4],
    [5, 6],
    [7, -8],
    [-5, -3]
])

print(w * x)

my_np_array = np.zeros(shape=(2,3,4))
my_np_array
#print(my_np_array)

my_np_array = np.array(
    [[1, 5, -2],
     [0, 1, 9]]
)
print(my_np_array.shape)
print(np.sum(my_np_array))
print(np.sum(my_np_array, axis=0))

my_np_3D = np.zeros(
    shape=(2, 3, 4)
)
print(np.sum(my_np_3D, axis=0).shape)
print(np.sum(my_np_3D, axis=1).shape)
print(np.sum(my_np_3D, axis=2).shape)

print(np.random.rand())
print(np.random.rand(2,3))
print(type(np.random.rand(3)))

print(np.random.randint(100))
print(np.random.randint(100, size=(2,3)))

my_array = np.random.randint(5, size=(3,4))
my_array

np.random.shuffle(my_array)
print(my_array)

dataset = np.random.rand(1000, 5)
print('Dataset:\n', dataset[:5])

np.random.shuffle(dataset)
print('Shuffled Dataset:\n', dataset[:5])

index_1 = int(0.8 * len(dataset))
index_2 = int(0.9 * len(dataset))
trainset, valset, testset = np.split(dataset, [index_1, index_2])
print('Train Dataset:\n', trainset[:5])
print('Validation Dataset:\n', valset[:5])
print('Test Dataset:\n', testset[:5])
print(len(trainset),len(valset), len(testset))